###############################################################################
# Copyright (c) 2013 Potential Ventures Ltd
# Copyright (c) 2013 SolarFlare Communications Inc
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of Potential Ventures Ltd,
#       SolarFlare Communications Inc nor the
#       names of its contributors may be used to endorse or promote products
#       derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL POTENTIAL VENTURES LTD BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
###############################################################################

# Common Makefile for Cadence Incisive

include $(shell cocotb-config --makefiles)/Makefile.inc

CMD_BIN := irun

ifdef IUS_BIN_DIR
    CMD := $(shell :; command -v $(IUS_BIN_DIR)/$(CMD_BIN) 2>/dev/null)
else
    # auto-detect bin dir from system path
    CMD := $(shell :; command -v $(CMD_BIN) 2>/dev/null)
endif

ifeq (, $(CMD))
    $(error "Unable to locate command >$(CMD_BIN)<")
else
    IUS_BIN_DIR := $(shell dirname $(CMD))
    export IUS_BIN_DIR
endif

EXTRA_ARGS += $(COMPILE_ARGS)
EXTRA_ARGS += $(SIM_ARGS)
EXTRA_ARGS += -licqueue

ifeq ($(PYTHON_ARCH),64bit)
    EXTRA_ARGS += -64
endif

EXTRA_ARGS += -nclibdirpath $(SIM_BUILD)
EXTRA_ARGS += -plinowarn

ifeq ($(GUI),1)
    EXTRA_ARGS += -gui
else
    EXTRA_ARGS +=
endif

# IUS errors out if multiple timescales are specified on the command line.
ifneq (,$(findstring timescale,$(EXTRA_ARGS)))
    $(error "Please use COCOTB_HDL_TIMEUNIT and COCOTB_HDL_TIMEPRECISION to specify timescale.")
endif

# Loading the VHPI library causes an error, so we always load the VPI library and supply
# GPI_EXTRA=$(shell cocotb-config --lib-name-path vhpi ius) if needed.

# Xcelium will use default vlog_startup_routines symbol only if vpi library name is libvpi.so
GPI_ARGS = -loadvpi $(shell cocotb-config --lib-name-path vpi ius):vlog_startup_routines_bootstrap

ifeq ($(TOPLEVEL_LANG),verilog)
    EXTRA_ARGS += -v93
    HDL_SOURCES = $(VERILOG_SOURCES)
    ROOT_LEVEL = $(TOPLEVEL)
ifneq ($(VHDL_SOURCES),)
    HDL_SOURCES += $(VHDL_SOURCES)
    GPI_EXTRA = $(shell cocotb-config --lib-name-path vhpi ius):cocotbvhpi_entry_point
endif
else ifeq ($(TOPLEVEL_LANG),vhdl)
    GPI_EXTRA = $(shell cocotb-config --lib-name-path vhpi ius):cocotbvhpi_entry_point
    EXTRA_ARGS += -v93
    EXTRA_ARGS += -top $(TOPLEVEL)
    RTL_LIBRARY ?= $(TOPLEVEL)
    MAKE_LIB = -makelib $(RTL_LIBRARY)
    HDL_SOURCES = $(VHDL_SOURCES)
ifneq ($(VERILOG_SOURCES),)
    HDL_SOURCES += $(VERILOG_SOURCES)
endif
else
   $(error "A valid value (verilog or vhdl) was not provided for TOPLEVEL_LANG=$(TOPLEVEL_LANG)")
endif

$(COCOTB_RESULTS_FILE): $(HDL_SOURCES) $(CUSTOM_COMPILE_DEPS) $(CUSTOM_SIM_DEPS) | $(SIM_BUILD)
	-@rm -f $(COCOTB_RESULTS_FILE)

	set -o pipefail; \
	MODULE=$(MODULE) TESTCASE=$(TESTCASE) TOPLEVEL=$(TOPLEVEL) GPI_EXTRA=$(GPI_EXTRA) TOPLEVEL_LANG=$(TOPLEVEL_LANG) \
	$(SIM_CMD_PREFIX) $(CMD) -timescale $(COCOTB_HDL_TIMEUNIT)/$(COCOTB_HDL_TIMEPRECISION) \
	$(EXTRA_ARGS) $(GPI_ARGS) +access+rwc $(MAKE_LIB) $(HDL_SOURCES) $(PLUSARGS) 2>&1 | tee $(SIM_BUILD)/sim.log

	$(call check_for_results_file)

clean::
	@rm -rf $(SIM_BUILD)
	@rm -rf irun.*
	@rm -rf ncsim.*
	@rm -rf gdb_cmd_ncsim
