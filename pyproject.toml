[build-system]
requires = [
    "scikit-build-core>=0.3.3",
    "pybind11",
    "find_libpython",
]
build-backend = "scikit_build_core.build"

[project]
name = "cocotb"
version = "2.0.0.dev0"
description = "cocotb is a coroutine based cosimulation library for writing VHDL and Verilog testbenches in Python."
readme = "README.md"
license = {text = "BSD-3-Clause"}
authors = [
    {name = "Chris Higgs"},
    {name = "Stuart Hodgson"},
]
maintainers = [
    {name = "cocotb contributors", email = "cocotb@lists.librecores.org"},
]
requires-python = ">=3.6.2"
dependencies = [
    "find_libpython",
]
classifiers = [
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.6",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering :: Electronic Design Automation (EDA)",
    "Framework :: cocotb",
]

[project.urls]
Homepage = "https://www.cocotb.org"
"Bug Tracker" = "https://github.com/cocotb/cocotb/issues"
"Source Code" = "https://github.com/cocotb/cocotb"
Documentation = "https://docs.cocotb.org"

[project.scripts]
cocotb-config = "cocotb_tools.config:main"

[tool.scikit-build]
# Specify the CMake source directory
cmake.source-dir = "."
# Set minimum CMake version
cmake.version = ">=3.15"
# Build directory
build-dir = "build/{wheel_tag}"
# CMake args can be passed here if needed
cmake.args = []
# Verbose output during build
build.verbose = false
# Ensure all packages are discovered and included
wheel.packages = ["src/cocotb", "src/cocotb_tools", "src/pygpi"]

[tool.scikit-build.cmake.define]
# Define any CMake variables here if needed



[tool.towncrier]
    package = "cocotb"
    directory = "docs/source/newsfragments"
    filename = "docs/source/release_notes.rst"
    issue_format = ":pr:`{issue}`"
    # The first underline is used for the version/date header,
    # the second underline for the subcategories (like 'Features')
    underlines = ["=", "-"]
    all_bullets = false

    [[tool.towncrier.type]]
        directory = "feature"
        name = "Features"
        showcontent = true

    [[tool.towncrier.type]]
        directory = "bugfix"
        name = "Bugfixes"
        showcontent = true

    [[tool.towncrier.type]]
        directory = "doc"
        name = "Improved Documentation"
        showcontent = true

    [[tool.towncrier.type]]
        directory = "removal"
        name = "Deprecations and Removals"
        showcontent = true

    [[tool.towncrier.type]]
        directory = "change"
        name = "Changes"
        showcontent = true

[tool.ruff]
extend-exclude = [
    "docs/source/conf.py",
    "makefiles",
    "venv",
    "_vendor",
    ".nox/",
]
target-version = "py37"

[tool.ruff.format]
docstring-code-format = true

[tool.ruff.lint]
extend-select = [
    "I",        # isort
    "UP",       # pyupgrade
    "PL",       # pylint
    "E",        # pycodestyle errors
    "W",        # pycodestyle warnings
    "F",        # pyflakes
    "C4",       # flake8-comprehension
    "LOG",      # flake8-logging
    "G",        # flake8-logging-format
    "ISC",      # implicit string concat
    "SIM103",   # return the condition directly
    "SIM300",   # yoda conditions
    "RUF100",   # unused noqa
    "RUF101",   # redirected noqa
    "RUF010",   # explicit type conversion in f-string
    "RUF005",   # collection literal concatenation
    "RUF022",   # unsorted __all__
    "PERF101",  # unnecessary list cast
    "PERF102",  # unnecessary dict.items()
    "B007",     # unused loop variable
    "PYI030",   # unnecessary literal union
]
ignore = [

    "E741",    # ambiguous variable name (preference)
    "E501",    # line too long (preference)
    "PLR0912", # Too many branches (>12) (preference)
    "PLR0913", # Too many arguments to function call (>5) (preference)
    "PLR0915", # Too many statements (>50) (preference)
    "PLR2004", # Magic value used in comparison (preference)
    "PLW0603", # Using the global statement (preference)
    "PLR0911", # Too many return statements (preference)
    "PLW1641", # __eq__ without __hash__ (mypy compatibility)
]

[tool.ruff.lint.per-file-ignores]
# necessary because of how file is included into documentation
"examples/doc_examples/quickstart/test_my_design.py" = [
    "E402",
    "F811",
]

[tool.ruff.lint.isort]
known-first-party = [
    "cocotb",
    "cocotb_tools",
    "pygpi",
]
known-third-party = [
    "pytest",
]

[tool.cibuildwheel]
# Build for supported platforms only.
# Even though we only support 64 bit operating systems, we still support 32 bit
# userspace applications (Python and simulators) on Windows and Linux.
#
# - CPython on Linux i686 and x86_64 with glibc
# - CPython on Windows i686 and x86_64
# - CPython on macOS x86_64
build = "cp*-manylinux_x86_64 cp*-manylinux_i686 cp*-win_amd64 cp*-win32 cp*-macosx_x86_64"

# By default, build on manylinux2014 for compatibility with CentOS/RHEL 7+ (once
# the user updates Python) and Ubuntu 20.04+ (with system Python).
manylinux-x86_64-image = "manylinux2014"
manylinux-i686-image = "manylinux2014"

[[tool.cibuildwheel.overrides]]
# Build CPython 3.6 wheels on manylinux1 to support Ubuntu 18.04, CentOS/RHEL 7
# and CentOS/RHEL 8 with their default Python 3.6/pip 9 installation.
select = "cp36-*"
manylinux-x86_64-image = "manylinux1"
manylinux-i686-image = "manylinux1"

[tool.pytest.ini_options]
# Note: Do *not* add files within the cocotb/ tree here. Add them to the
# noxfile instead.
testpaths = [
    "tests/pytest",
]

# Ensure that all markers used in pytests are declared (in here).
addopts = "--strict-markers"

markers = [
    "simulator_required: mark tests as needing a simulator",
    "compile: the compile step in runner-based tests",
]
# log_cli = true
# log_cli_level = DEBUG

[tool.coverage.paths]
source = [
    "src/cocotb/",
    ".nox/**/cocotb/",
]

[tool.coverage.report]
omit = [
    "*/cocotb_tools/*",
    "*/_vendor/*",
]
exclude_lines = [
    "pragma: no cover",
    # for excluding typing stubs
    "\\.\\.\\.",
    # for excluding abstractmethods
    "raise\\s+NotImplementedError",
    # excluding type checking blocks
    "if (typing\\.)?TYPE_CHECKING:"
]

[tool.codespell]
ignore-words-list = [
    "AFE",
    "Synopsys",
    "afe",
    "afile",
    "alog",
    "ccompiler",
    "datas",
    "implementors",
    "inout",
    "nam",
    "sting",
    "synopsys",
]

[tool.mypy]
packages = ["cocotb", "pygpi"]
modules = ["noxfile"]
disallow_untyped_defs = true
disallow_any_unimported = true
disallow_untyped_calls = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
implicit_reexport = false
show_error_codes = true
pretty = true
