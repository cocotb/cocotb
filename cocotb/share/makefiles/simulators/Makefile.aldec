###############################################################################
# Copyright (c) 2013 Potential Ventures Ltd
# Copyright (c) 2013 SolarFlare Communications Inc
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of Potential Ventures Ltd,
#       SolarFlare Communications Inc nor the
#       names of its contributors may be used to endorse or promote products
#       derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL POTENTIAL VENTURES LTD BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
###############################################################################

# Common Makefile for Aldec Riviera-PRO simulator

ifeq ($(GUI),1)
    CMD_BIN := riviera
else
    CMD_BIN := vsimsa
endif

ifdef ALDEC_BIN_DIR
    CMD := $(shell which $(ALDEC_BIN_DIR)/$(CMD_BIN) 2>/dev/null)
else
    # auto-detect bin dir from system path
    CMD := $(shell which $(CMD_BIN) 2>/dev/null)
endif

ifeq (, $(CMD))
    $(error "Unable to locate command >$(CMD_BIN)<")
else
	ALDEC_BIN_DIR := $(shell dirname $(CMD))
    export ALDEC_BIN_DIR
endif

ifeq ($(GUI),1)
    CMD += -nosplash
endif

# below allows for maintaining legacy syntax as well as enables using cross-simulator vars COMPILE_ARGS/SIM_ARGS
ALOG_ARGS += $(COMPILE_ARGS)
ACOM_ARGS += $(COMPILE_ARGS)
ASIM_ARGS += $(SIM_ARGS)

# Plusargs need to be passed to ASIM command not vsimsa
ASIM_ARGS += $(PLUSARGS)

RTL_LIBRARY ?= work
ALOG_ARGS += +define+COCOTB_SIM -dbg -pli libgpi
ACOM_ARGS += -dbg

# Aldec-specific coverage types:
# - (s)tatement
# - (b)ranch
# - (e)xpression
# - (c)ondition
# - (a)ssertion
# - (p)ath
# - finite state (m)achine
# Documentation: Riviera Pro 2017.02 Documentation - Page 359
COVERAGE_TYPES ?= sb
ifeq ($(COVERAGE),1)
    ASIM_ARGS += -acdb -acdb_cov $(COVERAGE_TYPES)
    ALOG_ARGS += -coverage $(COVERAGE_TYPES)
endif

GPI_EXTRA:=
ifeq ($(TOPLEVEL_LANG),verilog)
    GPI_ARGS = -pli libvpi
ifneq ($(VHDL_SOURCES),)
    GPI_EXTRA = vhpi
endif

else ifeq ($(TOPLEVEL_LANG),vhdl)

ifeq ($(OS),Msys)
    VHPI_LIB = $(shell sh -c 'cd $(LIB_DIR) && pwd -W')/libvhpi
else
    VHPI_LIB = $(LIB_DIR)/libvhpi
endif

    GPI_ARGS = -loadvhpi $(VHPI_LIB):vhpi_startup_routines_bootstrap
ifneq ($(VERILOG_SOURCES),)
    GPI_EXTRA = vpi
endif

else
   $(error "A valid value (verilog or vhdl) was not provided for TOPLEVEL_LANG=$(TOPLEVEL_LANG)")
endif


# Create a TCL script based on the list of $(VERILOG_SOURCES)
$(SIM_BUILD)/runsim.tcl : $(VERILOG_SOURCES) $(VHDL_SOURCES) $(SIM_BUILD)
	@echo "onerror {" > $@
	@echo "	puts [read [open sim.log r]]" >> $@
	@echo "	quit -code 1" >> $@
	@echo "}" >> $@
	@echo "@if [string length [array get env LICENSE_QUEUE]] {" >> $@
	@echo " set LICENSE_QUEUE $$::env(LICENSE_QUEUE)" >> $@
	@echo "}" >> $@
	@echo "alib $(RTL_LIBRARY)" >> $@
	@echo "set worklib $(RTL_LIBRARY)" >> $@
ifneq ($(VHDL_SOURCES),)
	@echo "acom $(ACOM_ARGS) $(VHDL_SOURCES)" >> $@
endif
ifneq ($(VERILOG_SOURCES),)
	@echo "alog $(ALOG_ARGS) $(VERILOG_SOURCES)" >> $@
endif
ifdef SCRIPT_FILE
	@echo "do $(SCRIPT_FILE)" >> $@
endif
ifneq ($(CFG_TOPLEVEL),)
	@echo "asim $(ASIM_ARGS) +access +w -interceptcoutput -O2 -dbg $(GPI_ARGS) $(CFG_TOPLEVEL) $(EXTRA_TOPS)" >> $@
else
	@echo "asim $(ASIM_ARGS) +access +w -interceptcoutput -O2 -dbg $(GPI_ARGS) $(TOPLEVEL) $(EXTRA_TOPS)" >> $@
endif
ifeq ($(WAVES),1)
	@echo "log -recursive *" >> $@
endif
ifeq ($(GUI),1)
	@echo "wave -rec *" >> $@
else
	@echo "run -all" >> $@
	@echo "endsim" >> $@
ifeq ($(COVERAGE),1)
	@echo "acdb report -cov $(COVERAGE_TYPES) -db $(RTL_LIBRARY).acdb -html -o coverage/acdb_report.html" >> $@
	@echo "acdb report -cov $(COVERAGE_TYPES) -db $(RTL_LIBRARY).acdb -txt -o coverage/acdb_report.txt" >> $@
endif
endif

ifeq ($(OS),Msys)

# Windows allows the situation where the libstc++ used at link time as
# specified by -L can be different to the one that is used at runtime which
# comes from the first libstdc++ that it finds in the path. As such
# we use the mingw lib used at build time and put this at the start of the path
# before running

MINGW_BIN_DIR = $(shell dirname $(shell which gcc))

EXTRA_LIBS := -laldecpli
EXTRA_LIBDIRS := -L$(ALDEC_BIN_DIR)
OLD_PATH := $(shell echo "$(PATH)" | sed 's/(/\\(/g' | sed 's/)/\\)/g' | sed 's/ /\\ /g')
LIB_LOAD = PATH=$(MINGW_BIN_DIR):$(OLD_PATH):$(LIB_DIR)
NEW_PYTHONPATH := $(shell echo "$(PYTHONPATH)" | sed -e 's/\\/\//g' -e 's/\([a-zA-Z]\):\//\/\1\//g' -e 's/;/:/g')
else
EXTRA_LIBS = -laldecpli
ifeq ($(ARCH),i686)
EXTRA_LIBDIRS = -L$(ALDEC_BIN_DIR)/Linux
else
EXTRA_LIBDIRS = -L$(ALDEC_BIN_DIR)/Linux64
endif
LIB_LOAD := LD_LIBRARY_PATH=$(LIB_DIR):$(LD_LIBRARY_PATH)
NEW_PYTHONPATH := $(PYTHONPATH)
endif

# Note it's the redirection of the output rather than the 'do' command
# that turns on batch mode (i.e. exit on completion/error)
$(COCOTB_RESULTS_FILE): $(SIM_BUILD)/runsim.tcl $(COCOTB_LIBS) $(COCOTB_VHPI_LIB) $(COCOTB_VPI_LIB) $(CUSTOM_SIM_DEPS)
	set -o pipefail; cd $(SIM_BUILD) && PYTHONPATH=$(LIB_DIR):$(PWD):$(NEW_PYTHONPATH) GPI_EXTRA=$(GPI_EXTRA) TOPLEVEL_LANG=$(TOPLEVEL_LANG) \
	$(LIB_LOAD) MODULE=$(MODULE) TESTCASE=$(TESTCASE) TOPLEVEL=$(TOPLEVEL) COCOTB_SIM=1 $(CMD) -do runsim.tcl | tee sim.log

clean::
	@rm -rf $(SIM_BUILD)

