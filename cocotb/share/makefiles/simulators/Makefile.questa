###############################################################################
# Copyright (c) 2013, 2018 Potential Ventures Ltd
# Copyright (c) 2013 SolarFlare Communications Inc
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of Potential Ventures Ltd,
#       SolarFlare Communications Inc nor the
#       names of its contributors may be used to endorse or promote products
#       derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL POTENTIAL VENTURES LTD BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
###############################################################################

include $(shell cocotb-config --makefiles)/Makefile.inc

CMD_BIN := vsim

ifdef MODELSIM_BIN_DIR
    CMD := $(shell :; command -v $(MODELSIM_BIN_DIR)/$(CMD_BIN) 2>/dev/null)
else
    # auto-detect bin dir from system path
    CMD := $(shell :; command -v $(CMD_BIN) 2>/dev/null)
endif

ifeq (, $(CMD))
    $(error "Unable to locate command >$(CMD_BIN)<")
endif

RTL_LIBRARY ?= work

TOPLEVEL := "$(RTL_LIBRARY).$(TOPLEVEL)"

ifndef VLOG_ARGS
    VLOG_ARGS = -timescale $(COCOTB_HDL_TIMEUNIT)/$(COCOTB_HDL_TIMEPRECISION) -mfcu
endif

COMPILE_ARGS += +acc

ifdef VERILOG_INCLUDE_DIRS
    VLOG_ARGS += +incdir+$(VERILOG_INCLUDE_DIRS)
endif

# below allows for maintaining legacy syntax as well as enables using cross-simulator vars COMPILE_ARGS/SIM_ARGS
VLOG_ARGS += $(COMPILE_ARGS)
VCOM_ARGS += $(COMPILE_ARGS)
VSIM_ARGS += $(SIM_ARGS)

ifeq ($(GUI),1)
    CMD += -gui
    VSIM_ARGS += -onfinish stop
else
    CMD += -c
    VSIM_ARGS += -onfinish exit
endif

FLI_LIB := $(shell cocotb-config --lib-name-path fli questa)
# if this target is run, then cocotb did not build the library
$(FLI_LIB):
	@echo -e "ERROR: cocotb was not installed with an FLI library, as the mti.h header could not be located.\n\
	If you installed an FLI-capable simulator after cocotb, you will need to reinstall cocotb.\n\
	Please check the cocotb documentation on ModelSim support." >&2 && exit 1

VHPI_LIB := $(shell cocotb-config --lib-name-path vhpi questa)

GPI_EXTRA :=

VHDL_GPI_INTERFACE ?= fli

ifeq ($(filter vhpi fli,$(VHDL_GPI_INTERFACE)),)
    $(error "A valid value (fli or vhpi) was not provided for VHDL_GPI_INTERFACE=$(VHDL_GPI_INTERFACE)")
endif

ifeq ($(TOPLEVEL_LANG),vhdl)
    CUSTOM_COMPILE_DEPS += $(FLI_LIB)
ifeq ($(VHDL_GPI_INTERFACE),fli)
    VSIM_ARGS += -foreign \"cocotb_init $(FLI_LIB)\"
else
    VSIM_ARGS += -voptargs="-access=rw+/." -foreign \"vhpi_startup_routines_bootstrap $(call to_tcl_path,$(VHPI_LIB))\"
endif
ifneq ($(VERILOG_SOURCES),)
    GPI_EXTRA :=  $(shell cocotb-config --lib-name-path vpi questa):cocotbvpi_entry_point
endif

else ifeq ($(TOPLEVEL_LANG),verilog)
    VSIM_ARGS += -pli $(shell cocotb-config --lib-name-path vpi questa)
ifneq ($(VHDL_SOURCES),)
    GPI_EXTRA := $(shell cocotb-config --lib-name-path $(VHDL_GPI_INTERFACE) questa):cocotb$(VHDL_GPI_INTERFACE)_entry_point
endif

else
   $(error "A valid value (verilog or vhdl) was not provided for TOPLEVEL_LANG=$(TOPLEVEL_LANG)")
endif

define make_lib
  echo "if [file exists $(SIM_BUILD)/$(LIB)] {vdel -lib $(SIM_BUILD)/$(LIB) -all}" >> $@;
  echo "vlib $(SIM_BUILD)/$(LIB)" >> $@;
  echo "vmap $(LIB) $(SIM_BUILD)/$(LIB)" >> $@;
  echo "vcom -work $(LIB) $(VCOM_ARGS) $(call to_tcl_path,$(VHDL_SOURCES_$(LIB)))" >> $@;
endef

$(SIM_BUILD)/runsim.do : $(VHDL_SOURCES) $(VERILOG_SOURCES) $(CUSTOM_COMPILE_DEPS) $(CUSTOM_SIM_DEPS) | $(SIM_BUILD)
	# Make sure all libs in SOURCES_VHDL_* are mentioned in VHDL_LIB_ORDER and vice versa
	$(foreach LIB, $(VHDL_LIB_ORDER), $(check_vhdl_sources))
	$(foreach SOURCES_VAR, $(filter VHDL_SOURCES_%, $(.VARIABLES)), $(check_lib_order))

	@echo "# Autogenerated file" > $@
	@echo "onerror {" >> $@
	@echo "	quit -f -code 1" >> $@
	@echo "}" >> $@
	@echo "vmap -c" >> $@
	$(foreach LIB, $(VHDL_LIB_ORDER), $(make_lib))
	@echo "if [file exists $(SIM_BUILD)/$(RTL_LIBRARY)] {vdel -lib $(SIM_BUILD)/$(RTL_LIBRARY) -all}" >> $@
	@echo "vlib $(SIM_BUILD)/$(RTL_LIBRARY)" >> $@
	@echo "vmap $(RTL_LIBRARY) $(SIM_BUILD)/$(RTL_LIBRARY)" >> $@
ifneq ($(VHDL_SOURCES),)
	@echo "vcom -work $(RTL_LIBRARY) $(VCOM_ARGS) $(call to_tcl_path,$(VHDL_SOURCES))" >> $@
endif
ifneq ($(VERILOG_SOURCES),)
	@echo "vlog -work $(RTL_LIBRARY) +define+COCOTB_SIM -sv $(VLOG_ARGS) $(EXTRA_ARGS) $(call to_tcl_path,$(VERILOG_SOURCES))" >> $@
endif
ifdef SCRIPT_FILE
	@echo "do $(SCRIPT_FILE)" >> $@
endif
	@echo "vsim $(VSIM_ARGS) $(EXTRA_ARGS) $(PLUSARGS) $(SIM_BUILD)/$(TOPLEVEL)" >> $@
ifeq ($(WAVES),1)
	@echo "log -recursive /*" >> $@
endif
ifeq ($(GUI),1)
	@echo "add log -r *" >> $@
else
	@echo "onbreak resume" >> $@
	@echo "run -all" >> $@
	@echo "quit" >> $@
endif

ifeq ($(PYTHON_ARCH),64bit)
    CMD += -64
endif

$(COCOTB_RESULTS_FILE): $(SIM_BUILD)/runsim.do
	-@rm -f $(COCOTB_RESULTS_FILE)

	set -o pipefail; MODULE=$(MODULE) TESTCASE=$(TESTCASE) TOPLEVEL=$(TOPLEVEL) \
	GPI_EXTRA=$(GPI_EXTRA) TOPLEVEL_LANG=$(TOPLEVEL_LANG) \
	$(SIM_CMD_PREFIX) $(CMD) $(RUN_ARGS) -do $(SIM_BUILD)/runsim.do $(PLUSARGS) 2>&1 | tee $(SIM_BUILD)/sim.log

	$(call check_for_results_file)

clean::
	-rm -rf $(SIM_BUILD)
