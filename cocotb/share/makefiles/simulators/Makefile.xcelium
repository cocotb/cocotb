###############################################################################
# Copyright (c) 2013, 2018 Potential Ventures Ltd
# Copyright (c) 2013 SolarFlare Communications Inc
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of Potential Ventures Ltd,
#       SolarFlare Communications Inc nor the
#       names of its contributors may be used to endorse or promote products
#       derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL POTENTIAL VENTURES LTD BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
###############################################################################

# Common Makefile for Cadence Xcelium

CMD_BIN := xrun

ifdef XCELIUM_BIN_DIR
    CMD := $(shell which $(XCELIUM_BIN_DIR)/$(CMD_BIN) 2>/dev/null)
else
    # auto-detect bin dir from system path
    CMD := $(shell which $(CMD_BIN) 2>/dev/null)
endif

ifeq (, $(CMD))
    $(error "Unable to locate command >$(CMD_BIN)<")
else
    XCELIUM_BIN_DIR := $(shell dirname $(CMD))
    export XCELIUM_BIN_DIR
endif

EXTRA_ARGS += $(COMPILE_ARGS)
EXTRA_ARGS += $(SIM_ARGS)
EXTRA_ARGS += -licqueue

ifneq ($(ARCH),i686)
    EXTRA_ARGS += -64
endif

EXTRA_ARGS += -xmlibdirpath $(SIM_BUILD) 
ifeq ($(DEBUG),1)
    EXTRA_ARGS += -pliverbose
    EXTRA_ARGS += -messages
    EXTRA_ARGS += -plidebug             # Enhance the profile output with PLI info
    EXTRA_ARGS += -plierr_verbose       # Expand handle info in PLI/VPI/VHPI messages
    EXTRA_ARGS += -vpicompat 1800v2005  #  <1364v1995|1364v2001|1364v2005|1800v2005> Specify the IEEE VPI
else
    EXTRA_ARGS += -plinowarn
endif

ifeq ($(GUI),1)
    EXTRA_ARGS += -gui
else
    EXTRA_ARGS +=
endif

# Xcelium loads VPI regardless of what is asked for, then VHPI if asked to,
# which does not play nice with our multi language, so we supply GPI_EXTRA=vhpi if needed.

#GPI_EXTRA:=
ifeq ($(TOPLEVEL_LANG),verilog)
    GPI_ARGS = -loadvpi $(LIB_DIR)/libvpi
    HDL_SOURCES = $(VERILOG_SOURCES)
    ROOT_LEVEL = $(TOPLEVEL)
    EXTRA_ARGS += -top $(TOPLEVEL)
    ifneq ($(VHDL_SOURCES),)
        HDL_SOURCES += $(VHDL_SOURCES)
        GPI_EXTRA = vhpi 
    endif
else ifeq ($(TOPLEVEL_LANG),vhdl)
    GPI_EXTRA = vhpi
    EXTRA_ARGS += -top $(TOPLEVEL)
    RTL_LIBRARY ?= $(TOPLEVEL)
    MAKE_LIB = -makelib $(RTL_LIBRARY)
    HDL_SOURCES = $(VHDL_SOURCES)
    ifneq ($(VERILOG_SOURCES),)
        HDL_SOURCES += $(VERILOG_SOURCES)
    endif
else
    $(error "A valid value (verilog or vhdl) was not provided for TOPLEVEL_LANG=$(TOPLEVEL_LANG)")
endif

GPI_LIB = $(COCOTB_VPI_LIB) $(COCOTB_VHPI_LIB)

$(COCOTB_RESULTS_FILE): $(SIM_BUILD) $(HDL_SOURCES) $(CUSTOM_COMPILE_DEPS) $(CUSTOM_SIM_DEPS) $(COCOTB_LIBS) $(GPI_LIB)
	LD_RUN_PATH=$(PYTHON_LIBDIR):$(LD_RUN_PATH) PYTHONPATH=$(LIB_DIR):$(PWD):$(PYTHONPATH) \
	LD_LIBRARY_PATH=$(LIB_DIR):$(LD_LIBRARY_PATH) MODULE=$(MODULE) TESTCASE=$(TESTCASE) TOPLEVEL=$(TOPLEVEL) COCOTB_SIM=1 \
	GPI_EXTRA=$(GPI_EXTRA) TOPLEVEL_LANG=$(TOPLEVEL_LANG) \
	set -o pipefail; \
	$(CMD) $(EXTRA_ARGS) $(GPI_ARGS) $(INCDIRS) -access +rwc -createdebugdb $(MAKE_LIB) $(HDL_SOURCES) $(PLUSARGS) 2>&1 | tee $(SIM_BUILD)/sim.log

clean::
	@rm -rf $(SIM_BUILD)
	@rm -rf xrun.*
	@rm -rf xmsim.*
	@rm -rf gdb_cmd_xmsim
