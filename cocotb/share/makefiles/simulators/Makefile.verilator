# Copyright cocotb contributors
# Licensed under the Revised BSD License, see LICENSE for details.
# SPDX-License-Identifier: BSD-3-Clause

TOPLEVEL_LANG ?= verilog

include $(shell cocotb-config --makefiles)/Makefile.inc

ifneq ($(or $(filter-out $(TOPLEVEL_LANG),verilog),$(VHDL_SOURCES)),)

results.xml:
	@echo "Skipping simulation as only Verilog is supported on simulator=$(SIM)"
debug: results.xml
clean::

else

CMD := verilator

ifeq ($(shell which $(CMD) 2>/dev/null),)
# Verilator is not in PATH, lets start searching for it
$(error Cannot find verilator.)
endif

VLT_MIN := 4.106
VLT_VERSION := $(shell $(CMD) --version | cut -d " " -f 2)
MIN_VERSION := $(shell printf "%s\n%s\n" "$(VLT_MIN)" "$(VLT_VERSION)" | sort -g | head -1)
ifneq ($(MIN_VERSION),$(VLT_MIN))
  $(error cocotb requires Verilator $(VLT_MIN) or later, but using $(VLT_VERSION))
endif

ifdef TOPLEVEL
  TOPMODULE_ARG := --top-module $(TOPLEVEL)
else
  TOPMODULE_ARG :=
endif

ifeq ($(VERILATOR_SIM_DEBUG), 1)
  COMPILE_ARGS += --debug -CFLAGS "-DVL_DEBUG -g"
  PLUSARGS += +verilator+debug
  BUILD_ARGS += OPT_FAST=-Og OPT_SLOW=-Og OPT_GLOBAL=-Og
endif

ifeq ($(VERILATOR_TRACE),1)
  EXTRA_ARGS += --trace --trace-structs
endif

EXTRA_ARGS += --timescale $(COCOTB_HDL_TIMEUNIT)/$(COCOTB_HDL_TIMEPRECISION)

COMPILE_ARGS += --vpi --public-flat-rw --prefix Vtop -o Vtop -LDFLAGS "-Wl,-rpath,$(shell cocotb-config --lib-dir) -L$(shell cocotb-config --lib-dir) -lcocotbvpi_verilator"

$(SIM_BUILD)/Vtop.mk: $(VERILOG_SOURCES) $(CUSTOM_COMPILE_DEPS) $(COCOTB_SHARE_DIR)/lib/verilator/verilator.cpp | $(SIM_BUILD)
	$(CMD) -cc --exe -Mdir $(SIM_BUILD) -DCOCOTB_SIM=1 $(TOPMODULE_ARG) $(COMPILE_ARGS) $(EXTRA_ARGS) $(VERILOG_SOURCES) $(COCOTB_SHARE_DIR)/lib/verilator/verilator.cpp

# Compilation phase
$(SIM_BUILD)/Vtop: $(SIM_BUILD)/Vtop.mk
	make -C $(SIM_BUILD) $(BUILD_ARGS) -f Vtop.mk

$(COCOTB_RESULTS_FILE): $(SIM_BUILD)/Vtop $(CUSTOM_SIM_DEPS)
	-@rm -f $(COCOTB_RESULTS_FILE)

	MODULE=$(MODULE) TESTCASE=$(TESTCASE) TOPLEVEL=$(TOPLEVEL) TOPLEVEL_LANG=$(TOPLEVEL_LANG) \
        $(SIM_CMD_PREFIX) $< $(PLUSARGS)

	$(call check_for_results_file)

debug:
	$(MAKE) VERILATOR_SIM_DEBUG=1 SIM_CMD_PREFIX="gdb --args" $(COCOTB_RESULTS_FILE)

clean::
	@rm -rf $(SIM_BUILD)
	@rm -f dump.vcd
	@rm -f dump.fst

endif
