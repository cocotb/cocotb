###############################################################################
# Copyright (c) 2013, 2018 Potential Ventures Ltd
# Copyright (c) 2013 SolarFlare Communications Inc
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of Potential Ventures Ltd,
#       SolarFlare Communications Inc nor the
#       names of its contributors may be used to endorse or promote products
#       derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL POTENTIAL VENTURES LTD BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
###############################################################################

# This is a simple wrapper Makefile to pull in the appropriate Makefile for
# the desired simulator and set up common paths for the sims to use to build with

# Make sure to use bash for the pipefail option used in many simulator Makefiles
SHELL := bash

.PHONY: all
all: sim

# NOTE: make sure to keep "helpmsg" aligned with documentation/source/building.rst
# Also keep it at 80 chars.
define helpmsg =
Targets
-------
sim                       Unconditionally re-run the simulator (default)
regression                Run simulator when dependencies have changes
clean                     Remove build and simulation artefacts
help                      This help text

Make Variables
--------------
GUI                       Set this to 1 to enable the GUI mode in the simulator
SIM                       Selects which simulator Makefile to use
WAVES                     Enable wave traces dump for Riviera-PRO and Questa
VERILOG_SOURCES           A list of the Verilog source files to include
VHDL_SOURCES              A list of the VHDL source files to include
VHDL_SOURCES_<lib>        VHDL source files to include in *lib* (GHDL only)
COMPILE_ARGS              Arguments to pass to compile stage of simulation
SIM_ARGS                  Arguments to pass to execution of compiled simulation
EXTRA_ARGS                Arguments for compile and execute phases
PLUSARGS                  Plusargs to pass to the simulator
GPI_EXTRA                 A list of extra libraries that are dynamically loaded at runtime
COCOTB_HDL_TIMEUNIT       Default time unit for simulation
COCOTB_HDL_TIMEPRECISION  Default time precision for simulation
CUSTOM_COMPILE_DEPS       Add additional dependencies to the compilation target
CUSTOM_SIM_DEPS           Add additional dependencies to the simulation target
SIM_BUILD                 Define a scratch directory for use by the simulator

Environment Variables
---------------------
TOPLEVEL                  Instance in the hierarchy to use as the DUT
RANDOM_SEED               Random seed, to recreate a previous test stimulus
COCOTB_ANSI_OUTPUT        Force cocotb to print or not print in color
COCOTB_REDUCED_LOG_FMT    Display log lines shorter
COCOTB_PDB_ON_EXCEPTION   Drop into the Python debugger (pdb) on exception
MODULE                    Modules to search for test functions (comma-separated)
TESTCASE                  Test function(s) to run (comma-separated list)
COCOTB_RESULTS_FILE       File name for xUnit XML tests results
SCRIPT_FILE               Simulator script to run (for e.g. wave traces)

Additional Environment Variables
--------------------------------
COCOTB_ATTACH             Pause time value in seconds before the simulator start
COCOTB_ENABLE_PROFILING   Performance analysis of the Python portion of cocotb
COCOTB_HOOKS              Comma-separated module list to be executed before test
COCOTB_LOG_LEVEL          Default logging level (default INFO)
COCOTB_RESOLVE_X          How to resolve X, Z, U, W on integer conversion
COCOTB_SCHEDULER_DEBUG    Enable additional output of coroutine scheduler
COVERAGE                  Report Python coverage (also HDL for some simulators)
MEMCHECK                  HTTP port to use for debugging Python memory usage

    For details, see $(DOCLINK)

endef

# this cannot be a regular target because of the way Makefile.$(SIM) is included
ifeq ($(MAKECMDGOALS),help)
_VERSION := $(shell cocotb-config -v)
# for non-intuitive use of ifneq see https://www.gnu.org/software/make/manual/make.html#Testing-Flags
ifneq (,$(findstring dev,$(_VERSION)))
DOCLINK := https://cocotb.readthedocs.io/en/latest/building.html
else
DOCLINK := https://cocotb.readthedocs.io/en/v$(_VERSION)/building.html
endif
$(info $(helpmsg))
# is there a cleaner way to exit here?
$(error "Stopping after printing help")
endif

SIM_BUILD ?= sim_build
export SIM_BUILD

COCOTB_RESULTS_FILE ?= results.xml
COCOTB_HDL_TIMEUNIT ?= 1ns
COCOTB_HDL_TIMEPRECISION ?= 1ps

# Maintain backwards compatibility by supporting upper and lower case SIM variable
SIM_LOWERCASE := $(shell echo $(SIM) | tr A-Z a-z)

HAVE_SIMULATOR = $(shell if [ -f $(COCOTB_SHARE_DIR)/makefiles/simulators/Makefile.$(SIM_LOWERCASE) ]; then echo 1; else echo 0; fi;)
AVAILABLE_SIMULATORS = $(patsubst .%,%,$(suffix $(wildcard $(COCOTB_SHARE_DIR)/makefiles/simulators/Makefile.*)))

ifeq ($(HAVE_SIMULATOR),0)
    $(error "Couldn't find makefile for simulator: "$(SIM_LOWERCASE)"! Available simulators: $(AVAILABLE_SIMULATORS)")
endif

# Depend on all Python from the cocotb package. This triggers a
# recompilation of the simulation if cocotb is updated.
CUSTOM_SIM_DEPS += $(shell find $(COCOTB_PY_DIR)/cocotb/ -name "*.py")

# This triggers a recompilation of the simulation if cocotb library is updated.
CUSTOM_SIM_DEPS += $(shell find $(LIB_DIR)/ -name "*")

PWD := $(shell pwd)

include $(COCOTB_SHARE_DIR)/makefiles/simulators/Makefile.$(SIM_LOWERCASE)

# Check that the COCOTB_RESULTS_FILE was created, since we can't set an exit code from cocotb.
define check_for_results_file
    @test -f $(COCOTB_RESULTS_FILE) || (echo "ERROR: $(COCOTB_RESULTS_FILE) was not written by the simulation!" >&2 && exit 1)
endef

$(SIM_BUILD):
	mkdir -p $@

# Regression rule uses Make dependencies to determine whether to run the simulation
.PHONY: regression
regression: $(COCOTB_RESULTS_FILE)

# Default sim rule will force a re-run of the simulation (though the cocotb library
# and RTL compilation phases are still evaluated by makefile dependencies)
.PHONY: sim
sim:
	-@rm -f $(COCOTB_RESULTS_FILE)
	$(MAKE) $(COCOTB_RESULTS_FILE)
