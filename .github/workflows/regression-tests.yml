# Copyright cocotb contributors
# Licensed under the Revised BSD License, see LICENSE for details.
# SPDX-License-Identifier: BSD-3-Clause
name: Regression Tests

on:
  workflow_call:
    inputs:
      nox_session_test_sim:
        required: true
        type: string
        default: dev_test_sim
      nox_session_test_nosim:
        required: true
        type: string
        default: dev_test_nosim
      download_artifacts:
        required: false
        type: boolean
        default: false
      group:
        required: false
        type: string
        default: "ci"
        description: Group of environments to run the tests against. Leave empty to run them all.

jobs:

  generate_envs:
    runs-on: ubuntu-latest
    name: Generate a list of environments to run tests against
    steps:
    - uses: actions/checkout@v3
    - run: ./.github/generate-envs.py --output-format=gha --group="${{inputs.group}}"
      id: run_generate_script
    outputs:
      envs: ${{ steps.run_generate_script.outputs.envs }}

  tests:

    needs: generate_envs

    name: ${{matrix.extra_name}}${{matrix.sim}} (${{matrix.sim-version}}) | ${{matrix.os}} | Python ${{matrix.python-version}} ${{matrix.may_fail && '| May Fail' || ''}}
    runs-on: ${{matrix.os}}
    env:
      SIM: ${{matrix.sim}}
      TOPLEVEL_LANG: ${{matrix.lang}}
      CXX: ${{matrix.cxx || 'g++'}}
      CC: ${{matrix.cc || 'gcc'}}
      OS: ${{matrix.os}}
      PYTHON_VERSION: ${{matrix.python-version}}

    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.generate_envs.outputs.envs) }}

    steps:
    - uses: actions/checkout@v3
      with:
        # GitHub PR's create a merge commit, and Actions are run on that commit.
        # Codecov's uploader needs the previous commit (tip of PR branch) to associate coverage correctly.
        # A fetch depth of 2 provides enough information without fetching the entire history.
        fetch-depth: 2

     # Download distribution artifacts (if any).
    - uses: actions/download-artifact@v3
      with:
        name: cocotb-dist
        path: dist
      if: ${{ inputs.download_artifacts }}

      # Install Python
    - name: Set up Python ${{matrix.python-version}}
      if: startsWith(matrix.os, 'ubuntu') || startsWith(matrix.os, 'macos')
      uses: actions/setup-python@v2
      with:
        python-version: ${{matrix.python-version}}
    - name: Set up Anaconda ${{matrix.python-version}} (Windows)
      if: startsWith(matrix.os, 'windows')
      uses: conda-incubator/setup-miniconda@v2
      with:
        auto-update-conda: true
        python-version: ${{matrix.python-version}}

      # Run tests that don't need a simulator.
    - name: Install Python testing dependencies
      run: |
        pip install nox
    - name: Run tests without simulators
      run: nox -s "${{ inputs.nox_session_test_nosim }}"
      continue-on-error: ${{matrix.may_fail || false}}

      # Install Icarus
    - name: Set up Icarus (Ubuntu - apt)
      if: startsWith(matrix.os, 'ubuntu') && matrix.sim == 'icarus' && matrix.sim-version == 'apt'
      run: |
        sudo apt install -y --no-install-recommends iverilog
    - name: Set up Icarus (Ubuntu - source)
      if: startsWith(matrix.os, 'ubuntu') && matrix.sim == 'icarus' && matrix.sim-version != 'apt'
      run: |
        sudo apt install -y --no-install-recommends g++ gperf flex bison make autoconf
        git clone https://github.com/steveicarus/iverilog.git -b ${{matrix.sim-version}}
        cd iverilog
        bash ./autoconf.sh
        bash ./configure
        make -j $(nproc)
        sudo make install
    - name: Set up Icarus (Windows - source)
      if: startsWith(matrix.os, 'windows') && matrix.sim == 'icarus'
      run: |
        conda install -c msys2 m2-base m2-make m2-autoconf m2-flex m2-bison m2-gperf m2w64-toolchain
        git clone https://github.com/steveicarus/iverilog.git -b ${{matrix.sim-version}}
        cd iverilog
        bash ./autoconf.sh
        bash ./configure --host=x86_64-w64-mingw32 --prefix=/c/iverilog
        make -j $(nproc)
        make install
        echo "C:\iverilog\bin" | Out-File -Append -FilePath $env:GITHUB_PATH -Encoding utf8
    - name: Set up Icarus (MacOS - homebrew --HEAD)
      if: startsWith(matrix.os, 'macos') && matrix.sim == 'icarus' && matrix.sim-version == 'homebrew-HEAD'
      run: |
        brew install icarus-verilog --HEAD
    - name: Set up Icarus (MacOS - homebrew)
      if: startsWith(matrix.os, 'macos') && matrix.sim == 'icarus' && matrix.sim-version == 'homebrew'
      run: |
        brew install icarus-verilog

      # Install GHDL
    - name: Set up GHDL (Ubuntu)
      if: startsWith(matrix.os, 'ubuntu') && matrix.sim == 'ghdl'
      run: |
        sudo apt install -y --no-install-recommends gnat
        git clone https://github.com/ghdl/ghdl.git
        cd ghdl
        git reset --hard ${{matrix.sim-version}}
        mkdir build
        cd build
        ../configure
        make -j $(nproc)
        sudo make install

      # Install Verilator
    - name: Set up Verilator (Ubuntu - apt)
      if: startsWith(matrix.os, 'ubuntu') && matrix.sim == 'verilator' && matrix.sim-version == 'apt'
      run: |
        sudo apt install -y --no-install-recommends verilator
    - name: Set up Verilator (Ubunutu - source)
      if: startsWith(matrix.os, 'ubuntu') && matrix.sim == 'verilator' && matrix.sim-version != 'apt'
      run: |
        sudo apt install -y --no-install-recommends make g++ perl python3 autoconf flex bison libfl2 libfl-dev zlibc zlib1g zlib1g-dev
        git clone https://github.com/verilator/verilator.git -b ${{matrix.sim-version}}
        cd verilator
        autoconf
        ./configure
        make -j $(nproc)
        sudo make install

      # Windows Testing
    - name: Install Python testing dependencies (Windows)
      if: startsWith(matrix.os, 'windows')
      run: pip install coverage pytest pytest-cov
    - name: Install cocotb build dependencies (Windows, mingw)
      if: startsWith(matrix.os, 'windows') && matrix.toolchain == 'mingw'
      run: conda install --yes -c msys2 m2-base m2-make m2w64-toolchain libpython
    - name: Install cocotb (Windows, mingw)
      if: startsWith(matrix.os, 'windows') && matrix.toolchain == 'mingw'
      run: |
        python ./setup.py build_ext --compiler=mingw32 develop
        pip install cocotb-bus
      continue-on-error: ${{matrix.may_fail || false}}
    - name: Install cocotb (Windows, msvc)
      if: startsWith(matrix.os, 'windows') && matrix.toolchain == 'msvc'
      run: python -m pip install -v -e .[bus]
      continue-on-error: ${{matrix.may_fail || false}}
    - name: Install cocotb runtime dependencies (Windows, msvc)
      if: startsWith(matrix.os, 'windows') && matrix.toolchain == 'msvc'
      run: conda install --yes -c msys2 m2-base m2-make
    - name: Test (Windows)
      if: startsWith(matrix.os, 'windows')
      id: windowstesting
      continue-on-error: ${{matrix.may_fail || false}}
      timeout-minutes: 15
      # Keep the commands and environment variables below in sync with tox.ini.
      run: |
        pytest
        make test
        bash -c 'find . -type f -name ".coverage.cocotb" -print -exec coverage combine --append {} \;'
      env:
        COCOTB_LIBRARY_COVERAGE: "1"

      # Ubuntu / MacOS Testing
    - name: Install cocotb build dependencies (Ubuntu - g++)
      if: startsWith(matrix.os, 'ubuntu') && (!matrix.cxx || matrix.cxx == 'g++')
      run: |
        sudo apt install g++
    - name: Install cocotb build dependencies (Ubuntu - clang++)
      if: startsWith(matrix.os, 'ubuntu') && matrix.cxx == 'clang++'
      run: |
        sudo apt install clang
    - name: Install cocotb build dependencies (MacOS)
      if: startsWith(matrix.os, 'macos')
      run: |
        g++ --version
    - name: Test (Ubuntu, MacOS)
      id: unixtesting
      if: startsWith(matrix.os, 'ubuntu') || startsWith(matrix.os, 'macos')
      continue-on-error: ${{matrix.may_fail || false}}
      timeout-minutes: 15
      run: |
        nox -k "${{ inputs.nox_session_test_sim }} and ${{ matrix.sim }} and ${{ matrix.lang }}"

    # codecov
    - name: Upload to codecov
      # Notes:
      # - The "--relative/-r" argument is not available on macOS gcov, skip
      #   coverage upload there.
      # - Clang builds must use llvm-cov instead of gcov, which isn't picked
      #   currently by the codecov uploader. Hence we do not upload coverage
      #   from clang builds currently, which don't add much anyways.
      # - When changing how many builds are uploaded to codecov also update
      #   `codecov.notify.after_n_builds` in `.codecov.yml`.
      if: >
        ((steps.windowstesting.outcome == 'success'
          && matrix.toolchain != 'mingw')
         || steps.unixtesting.outcome == 'success')
        && !startsWith(matrix.os, 'macos')
        && matrix.cxx != 'clang++'
      # There seems to be no way (as of Feb 2021) to get the job name in a
      # variable; we hence have to re-assemble it here.
      shell: bash
      run: |
        pip install coverage
        bash <(curl -s https://codecov.io/bash) \
          -n "${{matrix.extra_name}}${{matrix.sim}} (${{matrix.sim-version}}) | ${{matrix.os}} | Python ${{matrix.python-version}}" \
          -e SIM,TOPLEVEL_LANG,CXX,OS,PYTHON_VERSION \
          -a "-rl"
