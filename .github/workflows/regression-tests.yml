# Copyright cocotb contributors
# Licensed under the Revised BSD License, see LICENSE for details.
# SPDX-License-Identifier: BSD-3-Clause
name: Regression Tests

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:

  tests:
    name: ${{matrix.sim}} (${{matrix.sim-version}}) | ${{matrix.os}} | Python ${{matrix.python-version}}
    runs-on: ${{matrix.os}}
    strategy:
      fail-fast: false
      matrix:
        include:
          - sim-version: "v10_3"
            sim: 'icarus'
            lang: 'verilog'
            python-version: 3.8
            os: 'windows-latest'
          - sim-version: "master"
            sim: 'icarus'
            lang: 'verilog'
            python-version: 3.8
            os: 'windows-latest'
            may_fail: true
    env:
      SIM: ${{matrix.sim}}
      TOPLEVEL_LANG: ${{matrix.lang}}
      PYTHON: ${{matrix.python-version}}
      OS: ${{matrix.os}}
    steps:
    - uses: actions/checkout@v2
    - name: Set up Anaconda ${{matrix.python-version}}
      uses: conda-incubator/setup-miniconda@v1
      with:
        auto-update-conda: true
        python-version: ${{matrix.python-version}}
    - name: Set up cocotb build dependencies
      run: |
        conda install -c msys2 m2-base m2-make m2-autoconf m2-flex m2-bison m2-gperf m2w64-toolchain libpython
    - name: Build and install Icarus
      run: |
        git clone https://github.com/steveicarus/iverilog.git -b "${{matrix.sim-version}}"
        cd iverilog
        bash ./autoconf.sh
        bash ./configure --host=x86_64-w64-mingw32 --prefix=/c/iverilog
        make -j $(nproc)
        make install
        echo "::add-path::C:\iverilog\bin"
    - name: Install Python testing dependencies
      run: |
        pip install coverage xunitparser pytest pytest-cov
    - name: Install cocotb
      run: |
        python -m pip install  --global-option build_ext --global-option --compiler=mingw32 -e .
    - name: Test
      continue-on-error: ${{matrix.may_fail || false}}
      run: |
        pytest
        $pass = $?
        make test
        exit -not ($pass -and $?)
      # inverted the pass for exit because the boolean is converted to 0/1, but an exit code of 1 is a failure
    - name: Upload coverage
      if: steps.Test.outcome != 'failure'
      run: |
        pip install codecov
        bash -c 'find . -type f -name "\.coverage\.cocotb" | xargs coverage combine --append'
        codecov
