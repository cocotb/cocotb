t: HierarchyObject                                 t
  LONGSTART_a_very_long_name_which_will_get_hashed_a_very_long_name_which_will_get_hashed_a_very_long_name_which_will_get_hashed_a_very_long_name_which_will_get_hashed_LONGEND: LogicObject[1] t.LONGSTART_a_very_long_name_which_will_get_hashed_a_very_long_name_which_will_get_hashed_a_very_long_name_which_will_get_hashed_a_very_long_name_which_will_get_hashed_LONGEND
  a: LogicObject[8]                                t.a
  bus1: LogicObject[96]                            t.bus1
  clk: LogicObject[1]                              t.clk
  count: LogicObject[32]                           t.count
  do_generate: LogicObject[32]                     t.do_generate
  fourthreetwoone: ArrayObject[2]                  t.fourthreetwoone
  half_count: LogicObject[32]                      t.half_count
  long_int: LogicObject[64]                        t.long_int
  onebit: LogicObject[1]                           t.onebit
  quads: ArrayObject[2]                            t.quads
  real1: RealObject[None]                          t.real1
  status: LogicObject[32]                          t.status
  str1: StringObject[1]                            t.str1
  text: LogicObject[512]                           t.text
  text_byte: LogicObject[8]                        t.text_byte
  text_half: LogicObject[16]                       t.text_half
  text_long: LogicObject[64]                       t.text_long
  text_word: LogicObject[32]                       t.text_word
  twoone: LogicObject[2]                           t.twoone
  x: LogicObject[8]                                t.x
  arr: HierarchyArrayObject                        t.arr
    arr[1]: HierarchyObject                        t.arr[1]
      arr: HierarchyObject                         t.arr[1].arr
        LENGTH: LogicObject[32]                    t.arr[1].arr.LENGTH
        check: LogicObject[1]                      t.arr[1].arr.check
        rfr: LogicObject[1]                        t.arr[1].arr.rfr
        sig: LogicObject[1]                        t.arr[1].arr.sig
        verbose: LogicObject[1]                    t.arr[1].arr.verbose
    arr[2]: HierarchyObject                        t.arr[2]
      arr: HierarchyObject                         t.arr[2].arr
        LENGTH: LogicObject[32]                    t.arr[2].arr.LENGTH
        check: LogicObject[1]                      t.arr[2].arr.check
        rfr: LogicObject[2]                        t.arr[2].arr.rfr
        sig: LogicObject[2]                        t.arr[2].arr.sig
        verbose: LogicObject[1]                    t.arr[2].arr.verbose
  cond_scope: HierarchyObject                      t.cond_scope
    scoped_wire: LogicObject[32]                   t.cond_scope.scoped_wire
    scoped_sub: HierarchyObject                    t.cond_scope.scoped_sub
      redundant: LogicObject[1]                    t.cond_scope.scoped_sub.redundant
      subsig1: LogicObject[1]                      t.cond_scope.scoped_sub.subsig1
      subsig2: LogicObject[1]                      t.cond_scope.scoped_sub.subsig2
    sub_wrap_gen: HierarchyObject                  t.cond_scope.sub_wrap_gen
      gen_wrap: HierarchyObject                    t.cond_scope.sub_wrap_gen.gen_wrap
        LENGTH: LogicObject[32]                    t.cond_scope.sub_wrap_gen.gen_wrap.LENGTH
        gen_loop: HierarchyArrayObject             t.cond_scope.sub_wrap_gen.gen_wrap.gen_loop
          gen_loop[0]: HierarchyObject             t.cond_scope.sub_wrap_gen.gen_wrap.gen_loop[0]
            wrapped_sub: HierarchyObject           t.cond_scope.sub_wrap_gen.gen_wrap.gen_loop[0].wrapped_sub
              redundant: LogicObject[1]            t.cond_scope.sub_wrap_gen.gen_wrap.gen_loop[0].wrapped_sub.redundant
              subsig1: LogicObject[1]              t.cond_scope.sub_wrap_gen.gen_wrap.gen_loop[0].wrapped_sub.subsig1
              subsig2: LogicObject[1]              t.cond_scope.sub_wrap_gen.gen_wrap.gen_loop[0].wrapped_sub.subsig2
      my_sub: HierarchyObject                      t.cond_scope.sub_wrap_gen.my_sub
        redundant: LogicObject[1]                  t.cond_scope.sub_wrap_gen.my_sub.redundant
        subsig1: LogicObject[1]                    t.cond_scope.sub_wrap_gen.my_sub.subsig1
        subsig2: LogicObject[1]                    t.cond_scope.sub_wrap_gen.my_sub.subsig2
  intf_arr[0]: HierarchyObject                     t.intf_arr[0]
    addr: LogicObject[32]                          t.intf_arr[0].addr
  intf_arr[1]: HierarchyObject                     t.intf_arr[1]
    addr: LogicObject[32]                          t.intf_arr[1].addr
  outer_scope: HierarchyArrayObject                t.outer_scope
    outer_scope[1]: HierarchyObject                t.outer_scope[1]
      scoped_param: LogicObject[32]                t.outer_scope[1].scoped_param
      inner_scope: HierarchyArrayObject            t.outer_scope[1].inner_scope
        inner_scope[1]: HierarchyObject            t.outer_scope[1].inner_scope[1]
          scoped_param_inner: LogicObject[32]      t.outer_scope[1].inner_scope[1].scoped_param_inner
          arr: HierarchyObject                     t.outer_scope[1].inner_scope[1].arr
            LENGTH: LogicObject[32]                t.outer_scope[1].inner_scope[1].arr.LENGTH
            check: LogicObject[1]                  t.outer_scope[1].inner_scope[1].arr.check
            rfr: LogicObject[3]                    t.outer_scope[1].inner_scope[1].arr.rfr
            sig: LogicObject[3]                    t.outer_scope[1].inner_scope[1].arr.sig
            verbose: LogicObject[1]                t.outer_scope[1].inner_scope[1].arr.verbose
        inner_scope[2]: HierarchyObject            t.outer_scope[1].inner_scope[2]
          scoped_param_inner: LogicObject[32]      t.outer_scope[1].inner_scope[2].scoped_param_inner
          arr: HierarchyObject                     t.outer_scope[1].inner_scope[2].arr
            LENGTH: LogicObject[32]                t.outer_scope[1].inner_scope[2].arr.LENGTH
            check: LogicObject[1]                  t.outer_scope[1].inner_scope[2].arr.check
            rfr: LogicObject[3]                    t.outer_scope[1].inner_scope[2].arr.rfr
            sig: LogicObject[3]                    t.outer_scope[1].inner_scope[2].arr.sig
            verbose: LogicObject[1]                t.outer_scope[1].inner_scope[2].arr.verbose
    outer_scope[2]: HierarchyObject                t.outer_scope[2]
      scoped_param: LogicObject[32]                t.outer_scope[2].scoped_param
      inner_scope: HierarchyArrayObject            t.outer_scope[2].inner_scope
        inner_scope[1]: HierarchyObject            t.outer_scope[2].inner_scope[1]
          scoped_param_inner: LogicObject[32]      t.outer_scope[2].inner_scope[1].scoped_param_inner
          arr: HierarchyObject                     t.outer_scope[2].inner_scope[1].arr
            LENGTH: LogicObject[32]                t.outer_scope[2].inner_scope[1].arr.LENGTH
            check: LogicObject[1]                  t.outer_scope[2].inner_scope[1].arr.check
            rfr: LogicObject[5]                    t.outer_scope[2].inner_scope[1].arr.rfr
            sig: LogicObject[5]                    t.outer_scope[2].inner_scope[1].arr.sig
            verbose: LogicObject[1]                t.outer_scope[2].inner_scope[1].arr.verbose
        inner_scope[2]: HierarchyObject            t.outer_scope[2].inner_scope[2]
          scoped_param_inner: LogicObject[32]      t.outer_scope[2].inner_scope[2].scoped_param_inner
          arr: HierarchyObject                     t.outer_scope[2].inner_scope[2].arr
            LENGTH: LogicObject[32]                t.outer_scope[2].inner_scope[2].arr.LENGTH
            check: LogicObject[1]                  t.outer_scope[2].inner_scope[2].arr.check
            rfr: LogicObject[5]                    t.outer_scope[2].inner_scope[2].arr.rfr
            sig: LogicObject[5]                    t.outer_scope[2].inner_scope[2].arr.sig
            verbose: LogicObject[1]                t.outer_scope[2].inner_scope[2].arr.verbose
  sub: HierarchyObject                             t.sub
    redundant: LogicObject[1]                      t.sub.redundant
    subsig1: LogicObject[1]                        t.sub.subsig1
    subsig2: LogicObject[1]                        t.sub.subsig2
  sub_wrap: HierarchyObject                        t.sub_wrap
    gen_wrap: HierarchyObject                      t.sub_wrap.gen_wrap
      LENGTH: LogicObject[32]                      t.sub_wrap.gen_wrap.LENGTH
      gen_loop: HierarchyArrayObject               t.sub_wrap.gen_wrap.gen_loop
        gen_loop[0]: HierarchyObject               t.sub_wrap.gen_wrap.gen_loop[0]
          wrapped_sub: HierarchyObject             t.sub_wrap.gen_wrap.gen_loop[0].wrapped_sub
            redundant: LogicObject[1]              t.sub_wrap.gen_wrap.gen_loop[0].wrapped_sub.redundant
            subsig1: LogicObject[1]                t.sub_wrap.gen_wrap.gen_loop[0].wrapped_sub.subsig1
            subsig2: LogicObject[1]                t.sub_wrap.gen_wrap.gen_loop[0].wrapped_sub.subsig2
    my_sub: HierarchyObject                        t.sub_wrap.my_sub
      redundant: LogicObject[1]                    t.sub_wrap.my_sub.redundant
      subsig1: LogicObject[1]                      t.sub_wrap.my_sub.subsig1
      subsig2: LogicObject[1]                      t.sub_wrap.my_sub.subsig2
